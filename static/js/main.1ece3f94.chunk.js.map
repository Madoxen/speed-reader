{"version":3,"sources":["BookProcessor.tsx","PlayerControls.tsx","WordContainer.tsx","App.tsx","serviceWorker.ts","index.tsx"],"names":["BookProcessor","props","onFileChosen","bind","e","strategyDictionary","this","processTxt","processEpub","target","files","length","file","type","then","result","bookChangedHandler","console","log","text","split","accept","onChange","Component","PlayerControls","maxWordsPerMinute","minWordsPerMinute","onButtonClick","onSliderValueChange","onWordIndexSliderValueChange","newState","currentState","onStateChanged","value","onSpeedChanged","onWordIndexChanged","Slider","color","step","valueLabelDisplay","max","wordMax","min","wordIndex","Button","variant","className","onClick","WordContainer","word","App","timerID","theme","createMuiTheme","palette","primary","light","main","dark","contrastText","secondary","handleOnPlayerStateChange","handleOnSpeedChange","handleBookChanged","cycleWord","handleWordIndexChanged","state","currentWordIndex","currentSpeed","currentBook","clearInterval","setState","toggleInterval","speed","resetInterval","slicedBook","window","newIndex","setInterval","book","maxWords","ThemeProvider","isLocalhost","Boolean","location","hostname","match","registerValidSW","swUrl","config","navigator","serviceWorker","register","registration","onupdatefound","installingWorker","installing","onstatechange","controller","onUpdate","onSuccess","catch","error","ReactDOM","render","StrictMode","document","getElementById","URL","process","href","origin","addEventListener","fetch","headers","response","contentType","get","status","indexOf","ready","unregister","reload","checkValidServiceWorker"],"mappings":"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","file":"static/js/main.1ece3f94.chunk.js","sourcesContent":["import React, { ChangeEvent, Component } from 'react';\n\n\ninterface IProps\n{\n    bookChangedHandler : (slicedBook: string[]) => void; \n}\n\ninterface IState\n{\n\n}\n\nclass BookProcessor extends Component<IProps, IState> {\n    constructor(props: any) {\n        super(props);\n        this.onFileChosen = this.onFileChosen.bind(this);\n    }\n    \n\n    onFileChosen(e : ChangeEvent<HTMLInputElement>)\n    {\n        const strategyDictionary: {[key: string]: (file: File) => Promise<string[]>} = {\n            \"text/plain\":  this.processTxt,\n            \"application/epub+zip\": this.processEpub\n        }\n        \n        \n        if(e.target.files === null || e.target.files.length < 0)\n            return; //we cannot process non existing file list, or empty file list\n\n        //process ONLY first file in a list\n        let file = e.target.files[0];\n        strategyDictionary[file.type](file).then(result => {\n            this.props.bookChangedHandler(result);\n        });\n    }\n\n    private async processEpub(file : File) : Promise<string[]>\n    {\n        //MIME: application/epub+zip\n        console.log(\"Processing epub...\")\n        const result = await file.text();\n        return [];\n    }\n\n    private async processMobi(file : File) : Promise<string[]>\n    {\n        //TODO: research MOBI\n        //MIME\n        const result = await file.text();\n        return [];\n    }\n\n    private async processTxt(file : File) : Promise<string[]>\n    {\n        //MIME: text/plain\n        console.log(\"Processing txt...\")\n        const result = await file.text();\n        return result.split(\" \");\n    }\n\n\n    render() {\n        return(\n        <>\n            <input type=\"file\" accept=\".txt,application/epub+zip\" onChange={this.onFileChosen}></input>\n        </>);\n    }\n}\n\nexport default BookProcessor","import React, { ChangeEvent, Component } from 'react';\nimport logo from './logo.svg';\nimport './App.css';\nimport { Button, createMuiTheme, Slider, ThemeProvider } from '@material-ui/core';\nimport { isPropertySignature, parseConfigFileTextToJson } from 'typescript';\n\n\ninterface IProps {\n    currentState: \"playing\" | \"paused\",\n    currentWordIndex: number,\n    wordMax: number,\n    currentSpeed: number,\n    wordIndex: number,\n    onSpeedChanged: any, //TODO: change to concrete type \n    onStateChanged: any, //TODO: change to concrete type \n    onWordIndexChanged: any, //TODO: change to concrete type \n}\n\n\nclass PlayerControls extends Component<IProps>  {\n\n    maxWordsPerMinute: number = 1000;\n    minWordsPerMinute: number = 1;\n\n    constructor(props: IProps) {\n        super(props);\n        this.onButtonClick = this.onButtonClick.bind(this);\n        this.onSliderValueChange = this.onSliderValueChange.bind(this);\n        this.onWordIndexSliderValueChange = this.onWordIndexSliderValueChange.bind(this);\n    }\n\n    onButtonClick(e: any) {\n        let newState: string = \"\";\n        //TODO: Isnt there a better way? \n        if (this.props.currentState === \"playing\") {\n            newState = \"paused\";\n        }\n        else {\n            newState = \"playing\"\n        }\n        this.props.onStateChanged(newState);\n    }\n\n    onSliderValueChange(e: ChangeEvent<{}>, value: number | number[]) {\n        this.props.onSpeedChanged(value);\n    }\n\n    onWordIndexSliderValueChange(e: ChangeEvent<{}>, value: number | number[]) {\n        this.props.onWordIndexChanged(value);\n    }\n\n    render() {\n        return (\n            <> {/*Fragment*/}\n                <Slider color=\"primary\" step={1} valueLabelDisplay=\"on\" onChange={this.onWordIndexSliderValueChange} max={this.props.wordMax} min={0} value={this.props.wordIndex}></Slider>\n                <Slider color=\"primary\" step={1} valueLabelDisplay=\"auto\" onChange={this.onSliderValueChange} max={this.maxWordsPerMinute} min={this.minWordsPerMinute}></Slider>\n                <Button color=\"primary\" variant=\"contained\" className=\"App-button\" onClick={this.onButtonClick}>\n                    <a>{this.props.currentState}</a>\n                </Button>\n            </>\n        );\n    }\n\n}\n\nexport default PlayerControls;\n","import React from 'react';\nimport {Component} from 'react'\nimport './App.css';\n\n\ninterface IProps\n{\n    word : string | null;\n}\n\n\nclass WordContainer extends Component<IProps>\n{\n    constructor(props : IProps)\n    {\n        super(props);\n    }\n\n    render()\n    {\n        return(\n            <>\n                <p className=\"App-word-container\">{this.props.word}</p>\n            </>\n        );\n    }\n\n}\n\nexport default WordContainer","import { createMuiTheme, ThemeProvider } from '@material-ui/core';\nimport React, { Component } from 'react';\nimport './App.css';\nimport BookProcessor from './BookProcessor';\nimport PlayerControls from './PlayerControls';\nimport WordContainer from './WordContainer';\n\n\ninterface IProps { }\n\ninterface IState {\n  currentWordIndex: number;\n  currentState: \"playing\" | \"paused\";\n  currentSpeed: number; //Speed in words per minute\n  currentBook: string[] | null; //array of words\n}\n\nclass App extends Component<IProps, IState>  {\n\n  timerID: number = -1;\n\n  theme = createMuiTheme({\n    palette: {\n      primary: {\n        light: '#757ce8',\n        main: '#3f50b5',\n        dark: '#002884',\n        contrastText: '#fff',\n      },\n      secondary: {\n        light: '#ff7961',\n        main: '#f44336',\n        dark: '#ba000d',\n        contrastText: '#000',\n      },\n    },\n  });\n\n\n  constructor(props: IProps) {\n    super(props);\n\n    this.handleOnPlayerStateChange = this.handleOnPlayerStateChange.bind(this);\n    this.handleOnSpeedChange = this.handleOnSpeedChange.bind(this);\n    this.handleBookChanged = this.handleBookChanged.bind(this);\n    this.cycleWord = this.cycleWord.bind(this);\n    this.handleWordIndexChanged = this.handleWordIndexChanged.bind(this);\n\n    this.state = {\n      currentWordIndex: 0,\n      currentState: \"paused\",\n      currentSpeed: 100,\n      currentBook: null,\n    };\n  }\n\n  componentWillUnmount() {\n    if (this.timerID !== null)\n      clearInterval(this.timerID)\n  }\n\n\n  handleOnPlayerStateChange(state: IState[\"currentState\"]) {\n    this.setState({ currentState: state })\n    this.toggleInterval();\n  }\n\n  handleOnSpeedChange(speed: number) {\n    this.setState({ currentSpeed: speed });\n    if (this.state.currentState === \"playing\")\n      this.resetInterval();\n  }\n\n\n  handleBookChanged(slicedBook: string[]) {\n    if (this.timerID !== null) {\n      window.clearInterval(this.timerID);\n    }\n\n    //If book changes, set word array to the new one, and reset word index\n    this.setState({ currentBook: slicedBook, currentWordIndex: 0 });\n  }\n\n  handleWordIndexChanged(newIndex: number) {\n    this.setState({ currentWordIndex: newIndex });\n  }\n\n\n  //cycles to next word\n  private cycleWord() {\n    this.setState((state) => ({\n      currentWordIndex: state.currentWordIndex + 1\n    }));\n  }\n\n  //toggles interval timer on and off\n  private toggleInterval() {\n    if (this.timerID !== -1) {\n      window.clearInterval(this.timerID);\n      this.timerID = -1;\n    }\n    else {\n      //ex. WPM -> minute per word -> ms per word so 1/WPM * 60 * 1000\n      this.timerID = window.setInterval(this.cycleWord, (1.0 / this.state.currentSpeed) * 60000.0) //100 WPM -> 0.01 * 60000 = 600 ms = 0.6sec gut\n    }\n  }\n\n  //Resets interval timer that cycles words\n  private resetInterval() {\n    if (this.timerID !== -1) {\n      window.clearInterval(this.timerID);\n      this.timerID = -1;\n    }\n    this.timerID = window.setInterval(this.cycleWord, (1.0 / this.state.currentSpeed) * 60000.0) //100 WPM -> 0.01 * 60000 = 600 ms = 0.6sec gut\n  }\n\n\n  render() {\n    let book = this.state.currentBook;\n    let word: string | null = null;\n    let maxWords: number = 0\n    if (book !== null) {\n      word = book[this.state.currentWordIndex];\n      maxWords = book.length;\n    }\n\n    return (\n      <div className=\"App\">\n        <header className=\"App-header\">\n          <h1>Speed Reader</h1>\n        </header>\n\n        <ThemeProvider theme={this.theme}>\n          <WordContainer word={word}></WordContainer>\n\n          <div className=\"App-controls\">\n\n            <BookProcessor bookChangedHandler={this.handleBookChanged}></BookProcessor>\n            <PlayerControls\n              currentWordIndex={this.state.currentWordIndex}\n              wordMax={maxWords}\n              wordIndex={this.state.currentWordIndex}\n              currentSpeed={this.state.currentSpeed}\n              currentState={this.state.currentState}\n              onSpeedChanged={this.handleOnSpeedChange}\n              onStateChanged={this.handleOnPlayerStateChange}\n              onWordIndexChanged={this.handleWordIndexChanged}\n            ></PlayerControls>\n          </div>\n        </ThemeProvider>\n\n\n\n      </div>\n    );\n  }\n\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\ntype Config = {\n  onSuccess?: (registration: ServiceWorkerRegistration) => void;\n  onUpdate?: (registration: ServiceWorkerRegistration) => void;\n};\n\nexport function register(config?: Config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(\n      process.env.PUBLIC_URL,\n      window.location.href\n    );\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl: string, config?: Config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl: string, config?: Config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' }\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\nimport { createMuiTheme } from '@material-ui/core/styles';\n\nconst theme = createMuiTheme({\n  palette: {\n    primary: {\n      light: '#757ce8',\n      main: '#3f50b5',\n      dark: '#002884',\n      contrastText: '#fff',\n    },\n    secondary: {\n      light: '#ff7961',\n      main: '#f44336',\n      dark: '#ba000d',\n      contrastText: '#000',\n    },\n  },\n});\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\n\nserviceWorker.register(); //Our app can work entirely offline, user can \"upload\" (or rather give) book/text\n"],"sourceRoot":""}